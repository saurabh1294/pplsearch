var Gem = require('../Gem')
var proto = require('proto')

var domUtils = require("../domUtils")

module.exports = proto(Gem, function(superclass) {

	// static properties

    this.name = 'TextField'

	this.init = function(/*[label,] password*/) {
        if(arguments.length === 1) {
            var password = arguments[0]
        } else if(arguments.length > 1) {
            var label = arguments[0]
            var password = arguments[1]
        }

        this.domNode = document.createElement("input") // do this before calling the superclass constructor so that an extra useless domNode isn't created inside it
        superclass.init.call(this) // superclass constructor

		this.label = label
		//domUtils.setAttribute(this.domNode,'type','text');  // NOTE: IE fucks this up, and since 'text' is the default type for an input node, lets just forget abat it
        if(password)
            domUtils.setAttribute(this.domNode, 'type', 'password')
	}


	// instance properties

    Object.defineProperty(this, 'val', {
        // returns the value of the Option
        get: function() {
            return this.domNode.value
        },

        // sets the value of the Option
        set: function(value) {
            if(this.val === value) return; // do nothing if there's no change

            this.domNode.value = value
            this.emit('change')
        }
    })

});
